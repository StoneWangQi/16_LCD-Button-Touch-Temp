#ifndef __XPT2046_LCD_DEVICE_BOOK_H__
#define	__XPT2046_LCD_DEVICE_BOOK_H__

#include "stm32f10x.h"

#include "XPT2046_LCD_Function_book.h"
#include "XPT2046_LCD_book.h"
#include "LCD_book.h"
#include "LCD_Draw_book.h" 
#include "USART_book.h"



//======================================================颜色参数=====================================================
/*
	LCD 颜色代码，CL_是Color的简写
	16Bit由高位至低位， RRRR RGGG GGGB BBBB

	下面的RGB 宏将24位的RGB值转换为16位格式。
	启动windows的画笔程序，点击编辑颜色，选择自定义颜色，可以获得的RGB值。

	推荐使用迷你取色器软件获得你看到的界面颜色。
*/
#define LCD_RGB_565 1 
#if LCD_RGB_565
  #define      RGB(Rh,Gh,Bh)       (((Rh&0xf8)<<8)|((Gh&0xfc)<<3)|((Bh&0xf8)>>3)) 
#else 
  #define      RGB(RGB)            ((((RGB&0xf80000)) | ((RGB&0x00fc00)<<3)| ((RGB&0x0000f8)<<5))>>8)
#endif


enum{
	CL_WHITE    = RGB(255,255,255),	/* 白色 */
	CL_BLACK    = RGB(  0,  0,  0),	/* 黑色 */
	CL_RED      = RGB(255,	0,  0),	/* 红色 */
	CL_GREEN    = RGB(  0,255,  0),	/* 绿色 */
	CL_BLUE     = RGB(  0,	0,255),	/* 蓝色 */
	CL_YELLOW   = RGB(255,255,  0),	/* 黄色 */

	CL_GREY    = RGB( 98, 98, 98), 	/* 深灰色 */
	CL_GREY1		= RGB( 150, 150, 150), 	/* 浅灰色 */
	CL_GREY2		= RGB( 180, 180, 180), 	/* 浅灰色 */
	CL_GREY3		= RGB( 200, 200, 200), 	/* 最浅灰色 */
	CL_GREY4		= RGB( 230, 230, 230), 	/* 最浅灰色 */

	CL_BUTTON_GREY	= RGB( 195, 195, 195), /* WINDOWS 按钮表面灰色 */

	CL_MAGENTA      = RGB(255, 0, 255),	/* 红紫色，洋红色 */
	CL_CYAN         = RGB( 0, 255, 255),	/* 蓝绿色，青色 */

	CL_BLUE1        = RGB(  0,  0, 240),		/* 深蓝色 */
	CL_BLUE2        = RGB(  0,  0, 128),		/* 深蓝色 */
	CL_BLUE3        = RGB(  68, 68, 255),		/* 浅蓝色1 */
	CL_BLUE4        = RGB(  0, 64, 128),		/* 浅蓝色1 */

	/* UI 界面 Windows控件常用色 */
	CL_BTN_FACE		  = RGB(236, 233, 216),	/* 按钮表面颜色(灰) */
	CL_BOX_BORDER1	= RGB(172, 168,153),	/* 分组框主线颜色 */
	CL_BOX_BORDER2	= RGB(255, 255,255),	/* 分组框阴影线颜色 */

	CL_MASK			    = 0x7FFF	/* RGB565颜色掩码，用于文字背景透明 */
};
//======================================================形式是默认还是定制化=====================================================
 
typedef enum{
  Type_default = 0,
  Type_particularly ,
  Type_especially,           //橡皮
}Type_Style_Device;
//======================================================按键按钮的参数=====================================================
 
typedef struct{
  uint16_t start_x;   //按键的x起始坐标  
  uint16_t start_y;   //按键的y起始坐标
  uint16_t end_x;     //按键的x结束坐标 
  uint16_t end_y;     //按键的y结束坐标
  uint32_t para;      //颜色按钮中表示选择的颜色，笔迹形状按钮中表示选择的画刷
  uint8_t touch_flag; //按键按下的标志
  
  void (*draw_btn)(void * btn);     //按键描绘函数
  void (*btn_command)(void * btn);  //按键功能执行函数，例如切换颜色、画刷
  
}Touch_Button;

//======================================================按键画图功能的参数=====================================================
 
typedef enum{
  LINE_SING_PIXCEL = 0 ,//单像素线
  LINE_2_PIXCEL,  //2像素线
  
  LINE_4_PIXCEL,  //4像素线
  
  LINE_6_PIXCEL,  //6像素线
  
  LINE_8_PIXCEL,  //8像素线
  
  LINE_16_PIXCEL, //16像素线
  
  LINE_20_PIXCEL, //20像素线
  
  LINE_WITH_CIRCLE,  //珠子连线
    
  RUBBER,           //橡皮
  
  Draw_CLEAR,
  
}SHAPE;


/*画刷参数*/
typedef struct
{
  uint32_t color;  //颜色参数
  
  SHAPE  shape;  // 形状参数
  
}Brush_Style;

extern Brush_Style brush;


//======================================================功能参数=====================================================
void Palette_Init(  
  uint8_t  _LCD_GramScan_Mode ,//屏幕方向
  uint16_t _Page_Color ,  //画板颜色
  uint16_t _Brush_Color   //画笔颜色
);
 
void Touch_Button_Down(uint16_t x,uint16_t y);
void Touch_Button_Up(uint16_t x,uint16_t y);
void Draw_Trail(int16_t pre_x,int16_t pre_y,int16_t x,int16_t y,Brush_Style* brush);


//======================================================功能参数=====================================================
#define COLOR_BLOCK_WIDTH   40  //默认按钮的大小
#define COLOR_BLOCK_HEIGHT  28  //默认按钮的高度 

#define BUTTON_NUM  18          //默认按钮的数量 
#define PALETTE_START_Y   0     //默认按钮的排列顺序
#define PALETTE_END_Y     LCD_Y_LENGTH  //该参数定义再LCD_BOOK 中扩展变量

#define PALETT_Left 1
#if  PALETT_Left   //按钮栏在左边
  #define BUTTON_START_X      0
  #define PALETTE_START_X   (COLOR_BLOCK_WIDTH*2+1)
  #define PALETTE_END_X     LCD_X_LENGTH

#else     //按钮栏在右边，(存在触摸按键时也会的bug仅用于测试触摸屏左边界)
  #define BUTTON_START_X      (LCD_X_LENGTH-2*COLOR_BLOCK_WIDTH)
  #define PALETTE_START_X   	0
  #define PALETTE_END_X     	(LCD_X_LENGTH-2*COLOR_BLOCK_WIDTH)

#endif



#endif /* __XPT2046_LCD_DEVICE_BOOK_H__ */

