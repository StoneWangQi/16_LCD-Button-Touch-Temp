<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\Temp.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\Temp.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Wed Oct 20 16:10:06 2021
<BR><P>
<H3>Maximum Stack Usage =       2008 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; fn_FatFs_Document_Init &rArr; FatFs_document_Text &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[39]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[11f]">mem_set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11f]">mem_set</a><BR>
 <LI><a href="#[114]">chk_chr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[114]">chk_chr</a><BR>
 <LI><a href="#[ea]">scan_file</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ea]">scan_file</a><BR>
 <LI><a href="#[122]">mem_cpy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[122]">mem_cpy</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from adc_book.o(.text.ADC1_2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(.text.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">Command_Clear_Palette</a> from xpt2046_lcd_device_book.o(.text.Command_Clear_Palette) referenced from xpt2046_lcd_device_book.o(.text.Palette_Init)
 <LI><a href="#[53]">Command_RUBBER_Palette</a> from xpt2046_lcd_device_book.o(.text.Command_RUBBER_Palette) referenced from xpt2046_lcd_device_book.o(.text.Palette_Init)
 <LI><a href="#[51]">Command_Select_Brush</a> from xpt2046_lcd_device_book.o(.text.Command_Select_Brush) referenced from xpt2046_lcd_device_book.o(.text.Palette_Init)
 <LI><a href="#[4f]">Command_Select_Color</a> from xpt2046_lcd_device_book.o(.text.Command_Select_Color) referenced from xpt2046_lcd_device_book.o(.text.Palette_Init)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(.text.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">Draw_Clear_Button</a> from xpt2046_lcd_device_book.o(.text.Draw_Clear_Button) referenced from xpt2046_lcd_device_book.o(.text.Palette_Init)
 <LI><a href="#[50]">Draw_Color_Button</a> from xpt2046_lcd_device_book.o(.text.Draw_Color_Button) referenced from xpt2046_lcd_device_book.o(.text.Palette_Init)
 <LI><a href="#[54]">Draw_RUBBER_Button</a> from xpt2046_lcd_device_book.o(.text.Draw_RUBBER_Button) referenced from xpt2046_lcd_device_book.o(.text.Palette_Init)
 <LI><a href="#[52]">Draw_Shape_Button</a> from xpt2046_lcd_device_book.o(.text.Draw_Shape_Button) referenced from xpt2046_lcd_device_book.o(.text.Palette_Init)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from exit_book.o(.text.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from exit_book.o(.text.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">GPIO_Init</a> from stm32f10x_gpio.o(.text.GPIO_Init) referenced from lcd_book.o(.text.ILI9341_Init)
 <LI><a href="#[4d]">GPIO_Init</a> from stm32f10x_gpio.o(.text.GPIO_Init) referenced from spi_book.o(.text.SPI_FLASH_Init)
 <LI><a href="#[4d]">GPIO_Init</a> from stm32f10x_gpio.o(.text.GPIO_Init) referenced from sram_book.o(.text.SRAM_Init)
 <LI><a href="#[4d]">GPIO_Init</a> from stm32f10x_gpio.o(.text.GPIO_Init) referenced from xpt2046_lcd_book.o(.text.XPT2046_GPIO_Init)
 <LI><a href="#[59]">GPIO_ResetBits</a> from stm32f10x_gpio.o(.text.GPIO_ResetBits) referenced from xpt2046_lcd_book.o(.text.XPT2046_ReadAdc)
 <LI><a href="#[59]">GPIO_ResetBits</a> from stm32f10x_gpio.o(.text.GPIO_ResetBits) referenced from main.o(.text.fn_LED_Flash_Init)
 <LI><a href="#[5b]">GPIO_SetBits</a> from stm32f10x_gpio.o(.text.GPIO_SetBits) referenced from led_book.o(.text.fn_LED_ALL_OFF)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(.text.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[61]">ILI9341_DispStringLine_EN</a> from lcd_draw_book.o(.text.ILI9341_DispStringLine_EN) referenced from lcd_pagehtml_book.o(.text.fn_Lcd_Page1)
 <LI><a href="#[63]">ILI9341_DispStringLine_EN_CH</a> from lcd_draw_book.o(.text.ILI9341_DispStringLine_EN_CH) referenced from lcd_pagehtml_book.o(.text.fn_Lcd_Page2)
 <LI><a href="#[64]">ILI9341_DisplayStringEx</a> from lcd_draw_book.o(.text.ILI9341_DisplayStringEx) referenced from lcd_pagehtml_book.o(.text.fn_Lcd_Page2)
 <LI><a href="#[62]">ILI9341_DrawCircle</a> from lcd_draw_book.o(.text.ILI9341_DrawCircle) referenced from lcd_pagehtml_book.o(.text.fn_Lcd_Page1)
 <LI><a href="#[62]">ILI9341_DrawCircle</a> from lcd_draw_book.o(.text.ILI9341_DrawCircle) referenced from lcd_pagehtml_book.o(.text.fn_Lcd_Page2)
 <LI><a href="#[4b]">ILI9341_DrawLine</a> from lcd_draw_book.o(.text.ILI9341_DrawLine) referenced from lcd_draw_book.o(.text.ILI9341_DrawRectangle)
 <LI><a href="#[4b]">ILI9341_DrawLine</a> from lcd_draw_book.o(.text.ILI9341_DrawLine) referenced from lcd_pagehtml_book.o(.text.fn_Lcd_Page1)
 <LI><a href="#[4b]">ILI9341_DrawLine</a> from lcd_draw_book.o(.text.ILI9341_DrawLine) referenced from lcd_pagehtml_book.o(.text.fn_Lcd_Page2)
 <LI><a href="#[5f]">ILI9341_DrawRectangle</a> from lcd_draw_book.o(.text.ILI9341_DrawRectangle) referenced from lcd_pagehtml_book.o(.text.fn_Lcd_Page1)
 <LI><a href="#[5f]">ILI9341_DrawRectangle</a> from lcd_draw_book.o(.text.ILI9341_DrawRectangle) referenced from lcd_pagehtml_book.o(.text.fn_Lcd_Page2)
 <LI><a href="#[4c]">ILI9341_Read_Data</a> from lcd_book.o(.text.ILI9341_Read_Data) referenced from lcd_draw_book.o(.text.ILI9341_GetPointPixel)
 <LI><a href="#[4a]">ILI9341_SetPointPixel</a> from lcd_draw_book.o(.text.ILI9341_SetPointPixel) referenced from lcd_draw_book.o(.text.ILI9341_DrawCircle)
 <LI><a href="#[4e]">ILI9341_Write_Data</a> from lcd_book.o(.text.ILI9341_Write_Data) referenced from lcd_draw_book.o(.text.ILI9341_OpenWindow)
 <LI><a href="#[5a]">LCD_GetFont</a> from lcd_draw_book.o(.text.LCD_GetFont) referenced from lcd_pagehtml_book.o(.text.XPT2046_Touch_Calibrate_Page)
 <LI><a href="#[5a]">LCD_GetFont</a> from lcd_draw_book.o(.text.LCD_GetFont) referenced from lcd_pagehtml_book.o(.text.fn_Lcd_Page1)
 <LI><a href="#[5a]">LCD_GetFont</a> from lcd_draw_book.o(.text.LCD_GetFont) referenced from lcd_pagehtml_book.o(.text.fn_Lcd_Page2)
 <LI><a href="#[5d]">LCD_SetColors</a> from lcd_draw_book.o(.text.LCD_SetColors) referenced from lcd_pagehtml_book.o(.text.fn_Lcd_Page1)
 <LI><a href="#[5d]">LCD_SetColors</a> from lcd_draw_book.o(.text.LCD_SetColors) referenced from lcd_pagehtml_book.o(.text.fn_Lcd_Page2)
 <LI><a href="#[60]">LCD_SetFont</a> from lcd_draw_book.o(.text.LCD_SetFont) referenced from lcd_pagehtml_book.o(.text.fn_Lcd_Page1)
 <LI><a href="#[60]">LCD_SetFont</a> from lcd_draw_book.o(.text.LCD_SetFont) referenced from lcd_pagehtml_book.o(.text.fn_Lcd_Page2)
 <LI><a href="#[5e]">LCD_SetForeColor</a> from lcd_draw_book.o(.text.LCD_SetForeColor) referenced from lcd_pagehtml_book.o(.text.fn_Lcd_Page1)
 <LI><a href="#[5e]">LCD_SetForeColor</a> from lcd_draw_book.o(.text.LCD_SetForeColor) referenced from lcd_pagehtml_book.o(.text.fn_Lcd_Page2)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(.text.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(.text.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x_it.o(.text.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">SPI_FLASH_Send_Byte</a> from spi_book.o(.text.SPI_FLASH_Send_Byte) referenced from spi_book.o(.text.SPI_Write_Data)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(.text.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from systick_book.o(.text.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(.text.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from usart_book.o(.text.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(.text.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">__2printf</a> from printfa.o(i.__0printf) referenced from sram_book.o(.text.SRAM_Write)
 <LI><a href="#[58]">__2printf</a> from printfa.o(i.__0printf) referenced from fatfs_book.o(.text.file_check)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[68]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[5c]">fn_LED_ALL_OFF</a> from led_book.o(.text.fn_LED_ALL_OFF) referenced from main.o(.text.fn_LED_Flash_Init)
 <LI><a href="#[65]">fn_LED_GPIO_Config</a> from led_book.o(.text.fn_LED_GPIO_Config) referenced from led_book.o(.text.fn_Led_Init)
 <LI><a href="#[49]">fn_Systick_Delay</a> from systick_book.o(.text.fn_Systick_Delay) referenced from i2c_soft_book.o(.text.I2C_Soft_Read_fun)
 <LI><a href="#[49]">fn_Systick_Delay</a> from systick_book.o(.text.fn_Systick_Delay) referenced from i2c_soft_book.o(.text.I2C_WaitAck)
 <LI><a href="#[49]">fn_Systick_Delay</a> from systick_book.o(.text.fn_Systick_Delay) referenced from main.o(.text.fn_LED_Flash_Init)
 <LI><a href="#[67]">fputc</a> from usart_book.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[46]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[66]">puts</a> from puts.o(i.puts) referenced from main.o(.text.fn_SPI_FLASH_Soft_Init)
 <LI><a href="#[66]">puts</a> from puts.o(i.puts) referenced from main.o(.text.fn_SRAM_Init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[175]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[69]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[81]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[176]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[177]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[178]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[179]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[17a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[17b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_document_Text
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_ReadAdc_Smooth_XY
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
</UL>

<P><STRONG><a name="[17d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[16c]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_file
</UL>

<P><STRONG><a name="[e9]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_file_Check
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Get_TouchedPoint
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Get_TouchedPoint
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Get_TouchedPoint
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Get_TouchedPoint
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate
</UL>

<P><STRONG><a name="[17e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[17f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[6f]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[171]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[180]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[181]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[182]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[183]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7a]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[184]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, adc_book.o(.text.ADC1_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetITStatus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text.ADC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>ADC_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text.ADC_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[109]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text.DMA_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART_DMA_Config
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Config
</UL>

<P><STRONG><a name="[10e]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ROM_TO_RAM
</UL>

<P><STRONG><a name="[108]"></a>DMA_Init</STRONG> (Thumb, 70 bytes, Stack size 28 bytes, stm32f10x_dma.o(.text.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART_DMA_Config
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Config
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>Display_Char_test</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lcd_pagehtml_book.o(.text.Display_Char_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Display_Char_test &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>Display_LCD_clear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lcd_pagehtml_book.o(.text.Display_LCD_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Display_LCD_clear &rArr; ILI9341_Clear &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_LCD_Init
</UL>

<P><STRONG><a name="[8b]"></a>Draw_Trail</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, xpt2046_lcd_device_book.o(.text.Draw_Trail))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Draw_Trail &rArr; LCD_DrawUniLineCircle &rArr; ILI9341_DrawCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawUniLineCircle
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_SetPointPixel
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawRectangle
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawLine
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_TouchDown
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, exit_book.o(.text.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI0_IRQHandler &rArr; fn_LED_Corporate
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_LED_Corporate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, exit_book.o(.text.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI15_10_IRQHandler &rArr; fn_LED_Corporate
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_LED_Corporate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>EXTI_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>EXTI_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f10x_exti.o(.text.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_EXTI_GPIO_Config
</UL>

<P><STRONG><a name="[144]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_HRCC_SetSystic
</UL>

<P><STRONG><a name="[145]"></a>FLASH_SetLatency</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_HRCC_SetSystic
</UL>

<P><STRONG><a name="[d0]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f10x_fsmc.o(.text.FSMC_NORSRAMCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NORSRAMCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
</UL>

<P><STRONG><a name="[cf]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 176 bytes, Stack size 20 bytes, stm32f10x_fsmc.o(.text.FSMC_NORSRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
</UL>

<P><STRONG><a name="[97]"></a>FatFs_Close_flash</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fatfs_book.o(.text.FatFs_Close_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = FatFs_Close_flash &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_FatFs_Document_Init
</UL>

<P><STRONG><a name="[9a]"></a>FatFs_document_Text</STRONG> (Thumb, 280 bytes, Stack size 1040 bytes, fatfs_book.o(.text.FatFs_document_Text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992<LI>Call Chain = FatFs_document_Text &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_FatFs_Document_Init
</UL>

<P><STRONG><a name="[a1]"></a>FatFs_document_set_content</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, fatfs_book.o(.text.FatFs_document_set_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = FatFs_document_set_content &rArr; f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_FatFs_Document_Init
</UL>

<P><STRONG><a name="[a7]"></a>FatFs_equipment_flash</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, fatfs_book.o(.text.FatFs_equipment_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = FatFs_equipment_flash &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_FatFs_Document_Init
</UL>

<P><STRONG><a name="[13c]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f10x_gpio.o(.text.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_EXTI_GPIO_Config
</UL>

<P><STRONG><a name="[4d]"></a>GPIO_Init</STRONG> (Thumb, 180 bytes, Stack size 28 bytes, stm32f10x_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Soft_Check_State
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_EE_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_USART_IO_Config
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_LED_GPIO_Config
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Key_GPIO_Config
</UL>
<BR>[Address Reference Count : 4]<UL><LI> sram_book.o(.text.SRAM_Init)
<LI> lcd_book.o(.text.ILI9341_Init)
<LI> spi_book.o(.text.SPI_FLASH_Init)
<LI> xpt2046_lcd_book.o(.text.XPT2046_GPIO_Init)
</UL>
<P><STRONG><a name="[94]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_key_judge
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_TouchDetect
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_ReadAdc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_ReadAdc_Smooth_XY
</UL>

<P><STRONG><a name="[153]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_LED_Corporate
</UL>

<P><STRONG><a name="[59]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_LED_Corporate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_GPIO_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_ReadAdc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Rst
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_BackLed_Control
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text.fn_LED_Flash_Init)
<LI> xpt2046_lcd_book.o(.text.XPT2046_ReadAdc)
</UL>
<P><STRONG><a name="[5b]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_LED_GPIO_Config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_LED_Corporate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_ReadAdc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Rst
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_BackLed_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led_book.o(.text.fn_LED_ALL_OFF)
</UL>
<P><STRONG><a name="[a9]"></a>GetGBKCode_from_EXFlash</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fonts.o(.text.GetGBKCode_from_EXFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetGBKCode_from_EXFlash &rArr; SPI_Read_Data &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Data
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DisplayStringEx
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispChar_CH
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text.I2C_AcknowledgeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_fun
</UL>

<P><STRONG><a name="[b6]"></a>I2C_CheckEvent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text.I2C_CheckEvent))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_fun
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_fun
</UL>

<P><STRONG><a name="[b0]"></a>I2C_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text.I2C_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WaitEepromStandbyState
</UL>

<P><STRONG><a name="[b7]"></a>I2C_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_EE_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_fun
</UL>

<P><STRONG><a name="[ad]"></a>I2C_GenerateSTART</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_fun
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_fun
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WaitEepromStandbyState
</UL>

<P><STRONG><a name="[b1]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_fun
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_fun
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WaitEepromStandbyState
</UL>

<P><STRONG><a name="[b5]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_i2c.o(.text.I2C_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_fun
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_fun
</UL>

<P><STRONG><a name="[b2]"></a>I2C_Init</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, stm32f10x_i2c.o(.text.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_EE_Init
</UL>

<P><STRONG><a name="[ae]"></a>I2C_ReadRegister</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f10x_i2c.o(.text.I2C_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WaitEepromStandbyState
</UL>

<P><STRONG><a name="[b4]"></a>I2C_Read_fun</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, i2c_book.o(.text.I2C_Read_fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_Read_fun &rArr; I2C_TIMEOUT_UserCallback &rArr; fn_Usart_SendString &rArr; fn_Usart_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TIMEOUT_UserCallback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_I2C_EE_Init
</UL>

<P><STRONG><a name="[ba]"></a>I2C_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text.I2C_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_fun
</UL>

<P><STRONG><a name="[af]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_fun
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_fun
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WaitEepromStandbyState
</UL>

<P><STRONG><a name="[b8]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_fun
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_fun
</UL>

<P><STRONG><a name="[bc]"></a>I2C_Soft_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i2c_soft_book.o(.text.I2C_Soft_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_Soft_Init &rArr; EE_Soft_Check_State &rArr; I2C_Stop &rArr; fn_Systick_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Soft_Check_State
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_I2C_EE_Soft_Init
</UL>

<P><STRONG><a name="[bd]"></a>I2C_Soft_Read_fun</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, i2c_soft_book.o(.text.I2C_Soft_Read_fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_Soft_Read_fun &rArr; I2C_Stop &rArr; fn_Systick_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Systick_Delay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_I2C_EE_Soft_Init
</UL>

<P><STRONG><a name="[be]"></a>I2C_Soft_Write_fun</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, i2c_soft_book.o(.text.I2C_Soft_Write_fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C_Soft_Write_fun &rArr; EE_Soft_WriteBytes &rArr; I2C_Stop &rArr; fn_Systick_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Soft_WriteBytes
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Soft_Check_State
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Systick_Delay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_I2C_EE_Soft_Init
</UL>

<P><STRONG><a name="[c0]"></a>I2C_Write_fun</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, i2c_book.o(.text.I2C_Write_fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_Write_fun &rArr; I2C_TIMEOUT_UserCallback &rArr; fn_Usart_SendString &rArr; fn_Usart_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TIMEOUT_UserCallback
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WaitEepromStandbyState
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_I2C_EE_Init
</UL>

<P><STRONG><a name="[c1]"></a>ILI9341_BackLed_Control</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd_book.o(.text.ILI9341_BackLed_Control))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
</UL>

<P><STRONG><a name="[88]"></a>ILI9341_Clear</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd_draw_book.o(.text.ILI9341_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ILI9341_Clear &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_OpenWindow
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_FillColor
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Lcd_Page2
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Lcd_Page1
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate_Page
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Palette_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_LCD_clear
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_display_String
</UL>

<P><STRONG><a name="[d2]"></a>ILI9341_Delay</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, lcd_book.o(.text.ILI9341_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ILI9341_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate_Page
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Rst
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
</UL>

<P><STRONG><a name="[c4]"></a>ILI9341_DispChar_CH</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, lcd_draw_book.o(.text.ILI9341_DispChar_CH))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ILI9341_DispChar_CH &rArr; GetGBKCode_from_EXFlash &rArr; SPI_Read_Data &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_OpenWindow
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_GetPointPixel
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCode_from_EXFlash
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispString_EN_CH
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispString_CH
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispStringLine_EN_CH
</UL>

<P><STRONG><a name="[c7]"></a>ILI9341_DispChar_EN</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lcd_draw_book.o(.text.ILI9341_DispChar_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ILI9341_DispChar_EN &rArr; ILI9341_GetPointPixel &rArr; ILI9341_SetCursor &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_OpenWindow
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_GetPointPixel
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispString_EN_CH
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispStringLine_EN_CH
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispStringLine_EN
</UL>

<P><STRONG><a name="[61]"></a>ILI9341_DispStringLine_EN</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, lcd_draw_book.o(.text.ILI9341_DispStringLine_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ILI9341_DispStringLine_EN &rArr; ILI9341_DispChar_EN &rArr; ILI9341_GetPointPixel &rArr; ILI9341_SetCursor &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispChar_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Lcd_Page2
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate_Page
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_pagehtml_book.o(.text.fn_Lcd_Page1)
</UL>
<P><STRONG><a name="[63]"></a>ILI9341_DispStringLine_EN_CH</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, lcd_draw_book.o(.text.ILI9341_DispStringLine_EN_CH))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ILI9341_DispStringLine_EN_CH &rArr; ILI9341_DispChar_CH &rArr; GetGBKCode_from_EXFlash &rArr; SPI_Read_Data &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispChar_EN
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispChar_CH
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate_Page
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_pagehtml_book.o(.text.fn_Lcd_Page2)
</UL>
<P><STRONG><a name="[c8]"></a>ILI9341_DispString_CH</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lcd_draw_book.o(.text.ILI9341_DispString_CH))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ILI9341_DispString_CH &rArr; ILI9341_DispChar_CH &rArr; GetGBKCode_from_EXFlash &rArr; SPI_Read_Data &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispChar_CH
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Lcd_Page2
</UL>

<P><STRONG><a name="[89]"></a>ILI9341_DispString_EN_CH</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, lcd_draw_book.o(.text.ILI9341_DispString_EN_CH))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ILI9341_DispString_EN_CH &rArr; ILI9341_DispChar_CH &rArr; GetGBKCode_from_EXFlash &rArr; SPI_Read_Data &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispChar_EN
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispChar_CH
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_RUBBER_Button
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Clear_Button
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Lcd_Page2
</UL>

<P><STRONG><a name="[64]"></a>ILI9341_DisplayStringEx</STRONG> (Thumb, 208 bytes, Stack size 80 bytes, lcd_draw_book.o(.text.ILI9341_DisplayStringEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ILI9341_DisplayStringEx &rArr; ILI9341_DrawChar_Ex &rArr; ILI9341_GetPointPixel &rArr; ILI9341_SetCursor &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_zoomChar
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawChar_Ex
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCode_from_EXFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_display_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_pagehtml_book.o(.text.fn_Lcd_Page2)
</UL>
<P><STRONG><a name="[ca]"></a>ILI9341_DrawChar_Ex</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, lcd_draw_book.o(.text.ILI9341_DrawChar_Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ILI9341_DrawChar_Ex &rArr; ILI9341_GetPointPixel &rArr; ILI9341_SetCursor &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_OpenWindow
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_GetPointPixel
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DisplayStringEx
</UL>

<P><STRONG><a name="[62]"></a>ILI9341_DrawCircle</STRONG> (Thumb, 396 bytes, Stack size 88 bytes, lcd_draw_book.o(.text.ILI9341_DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ILI9341_DrawCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Shape_Button
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Trail
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate_Page
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawUniLineCircle
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lcd_pagehtml_book.o(.text.fn_Lcd_Page1)
<LI> lcd_pagehtml_book.o(.text.fn_Lcd_Page2)
</UL>
<P><STRONG><a name="[cb]"></a>ILI9341_DrawCross</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lcd_draw_book.o(.text.ILI9341_DrawCross))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ILI9341_DrawCross &rArr; ILI9341_DrawLine &rArr; ILI9341_SetPointPixel &rArr; ILI9341_SetCursor &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate_Page
</UL>

<P><STRONG><a name="[4b]"></a>ILI9341_DrawLine</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, lcd_draw_book.o(.text.ILI9341_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ILI9341_DrawLine &rArr; ILI9341_SetPointPixel &rArr; ILI9341_SetCursor &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_SetPointPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Shape_Button
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Trail
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawCross
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lcd_draw_book.o(.text.ILI9341_DrawRectangle)
<LI> lcd_pagehtml_book.o(.text.fn_Lcd_Page1)
<LI> lcd_pagehtml_book.o(.text.fn_Lcd_Page2)
</UL>
<P><STRONG><a name="[5f]"></a>ILI9341_DrawRectangle</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lcd_draw_book.o(.text.ILI9341_DrawRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ILI9341_DrawRectangle &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_OpenWindow
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_FillColor
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Shape_Button
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_RUBBER_Button
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Color_Button
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Clear_Button
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Clear_Palette
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Trail
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Palette_Init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lcd_pagehtml_book.o(.text.fn_Lcd_Page1)
<LI> lcd_pagehtml_book.o(.text.fn_Lcd_Page2)
</UL>
<P><STRONG><a name="[c5]"></a>ILI9341_GetPointPixel</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lcd_draw_book.o(.text.ILI9341_GetPointPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ILI9341_GetPointPixel &rArr; ILI9341_SetCursor &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_SetCursor
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawChar_Ex
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispChar_EN
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispChar_CH
</UL>

<P><STRONG><a name="[d3]"></a>ILI9341_GramScan</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, lcd_book.o(.text.ILI9341_GramScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ILI9341_GramScan
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Palette_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
</UL>

<P><STRONG><a name="[cd]"></a>ILI9341_Init</STRONG> (Thumb, 796 bytes, Stack size 128 bytes, lcd_book.o(.text.ILI9341_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ILI9341_Init &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Rst
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_GramScan
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Delay
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_BackLed_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_LCD_Init
</UL>

<P><STRONG><a name="[c2]"></a>ILI9341_OpenWindow</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lcd_draw_book.o(.text.ILI9341_OpenWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawRectangle
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawChar_Ex
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispChar_EN
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispChar_CH
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Clear
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_SetCursor
</UL>

<P><STRONG><a name="[4c]"></a>ILI9341_Read_Data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_book.o(.text.ILI9341_Read_Data))
<BR>[Address Reference Count : 1]<UL><LI> lcd_draw_book.o(.text.ILI9341_GetPointPixel)
</UL>
<P><STRONG><a name="[d1]"></a>ILI9341_Rst</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lcd_book.o(.text.ILI9341_Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ILI9341_Rst &rArr; ILI9341_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
</UL>

<P><STRONG><a name="[4a]"></a>ILI9341_SetPointPixel</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lcd_draw_book.o(.text.ILI9341_SetPointPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ILI9341_SetPointPixel &rArr; ILI9341_SetCursor &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_SetCursor
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_FillColor
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Trail
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_draw_book.o(.text.ILI9341_DrawCircle)
</UL>
<P><STRONG><a name="[c6]"></a>ILI9341_Write_Cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_book.o(.text.ILI9341_Write_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_OpenWindow
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_GetPointPixel
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawChar_Ex
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispChar_EN
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispChar_CH
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_FillColor
</UL>

<P><STRONG><a name="[4e]"></a>ILI9341_Write_Data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_book.o(.text.ILI9341_Write_Data))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawChar_Ex
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispChar_EN
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispChar_CH
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_FillColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_draw_book.o(.text.ILI9341_OpenWindow)
</UL>
<P><STRONG><a name="[c9]"></a>ILI9341_zoomChar</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, lcd_draw_book.o(.text.ILI9341_zoomChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ILI9341_zoomChar
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DisplayStringEx
</UL>

<P><STRONG><a name="[8a]"></a>LCD_DrawUniLineCircle</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, lcd_draw_book.o(.text.LCD_DrawUniLineCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_DrawUniLineCircle &rArr; ILI9341_DrawCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Shape_Button
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Trail
</UL>

<P><STRONG><a name="[5a]"></a>LCD_GetFont</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_draw_book.o(.text.LCD_GetFont))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate_Page
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lcd_pagehtml_book.o(.text.fn_Lcd_Page1)
<LI> lcd_pagehtml_book.o(.text.fn_Lcd_Page2)
<LI> lcd_pagehtml_book.o(.text.XPT2046_Touch_Calibrate_Page)
</UL>
<P><STRONG><a name="[d6]"></a>LCD_SetBackColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_draw_book.o(.text.LCD_SetBackColor))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Palette_Init
</UL>

<P><STRONG><a name="[5d]"></a>LCD_SetColors</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_draw_book.o(.text.LCD_SetColors))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Shape_Button
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_RUBBER_Button
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Color_Button
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Clear_Button
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Select_Color
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Select_Brush
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_RUBBER_Palette
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Clear_Palette
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Trail
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate_Page
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Palette_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_LCD_clear
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lcd_pagehtml_book.o(.text.fn_Lcd_Page1)
<LI> lcd_pagehtml_book.o(.text.fn_Lcd_Page2)
</UL>
<P><STRONG><a name="[60]"></a>LCD_SetFont</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_draw_book.o(.text.LCD_SetFont))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_RUBBER_Button
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Clear_Button
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate_Page
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lcd_pagehtml_book.o(.text.fn_Lcd_Page1)
<LI> lcd_pagehtml_book.o(.text.fn_Lcd_Page2)
</UL>
<P><STRONG><a name="[5e]"></a>LCD_SetForeColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_draw_book.o(.text.LCD_SetForeColor))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate_Page
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lcd_pagehtml_book.o(.text.fn_Lcd_Page1)
<LI> lcd_pagehtml_book.o(.text.fn_Lcd_Page2)
</UL>
<P><STRONG><a name="[d7]"></a>LCD_SetTextColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_draw_book.o(.text.LCD_SetTextColor))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate_Page
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Palette_Init
</UL>

<P><STRONG><a name="[d4]"></a>Lcd_display_String</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, lcd_draw_book.o(.text.Lcd_display_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Lcd_display_String &rArr; ILI9341_DisplayStringEx &rArr; ILI9341_DrawChar_Ex &rArr; ILI9341_GetPointPixel &rArr; ILI9341_SetCursor &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Systick_Delay
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DisplayStringEx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_XPT2046_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_LCD_Init
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15b]"></a>NVIC_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, misc.o(.text.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_USART_Config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_NVIC_Config
</UL>

<P><STRONG><a name="[15a]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_USART_Config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_NVIC_Config
</UL>

<P><STRONG><a name="[d5]"></a>Palette_Init</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, xpt2046_lcd_device_book.o(.text.Palette_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Palette_Init &rArr; ILI9341_DrawRectangle &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawRectangle
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Clear
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_GramScan
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Lcd_Page3
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART_DMA_Config
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Config
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
</UL>

<P><STRONG><a name="[111]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_EE_Init
</UL>

<P><STRONG><a name="[8d]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Soft_Check_State
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_EE_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_USART_IO_Config
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_USART_Config
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_LED_GPIO_Config
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Key_GPIO_Config
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_EXTI_GPIO_Config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_GPIO_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
</UL>

<P><STRONG><a name="[141]"></a>RCC_DeInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_HRCC_SetSystic
</UL>

<P><STRONG><a name="[b3]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[14b]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_HRCC_SetSystic
</UL>

<P><STRONG><a name="[14d]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_HRCC_SetSystic
</UL>

<P><STRONG><a name="[146]"></a>RCC_HCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_HRCC_SetSystic
</UL>

<P><STRONG><a name="[142]"></a>RCC_HSEConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_HRCC_SetSystic
</UL>

<P><STRONG><a name="[147]"></a>RCC_PCLK1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_HRCC_SetSystic
</UL>

<P><STRONG><a name="[148]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_HRCC_SetSystic
</UL>

<P><STRONG><a name="[14a]"></a>RCC_PLLCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_HRCC_SetSystic
</UL>

<P><STRONG><a name="[149]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_HRCC_SetSystic
</UL>

<P><STRONG><a name="[14c]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_HRCC_SetSystic
</UL>

<P><STRONG><a name="[143]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, stm32f10x_rcc.o(.text.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_WaitForHSEStartUp
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_HRCC_SetSystic
</UL>

<P><STRONG><a name="[d8]"></a>SPI_BufferWrite_Data</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, spi_book.o(.text.SPI_BufferWrite_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Data
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_SPI_FLASH_Soft_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[df]"></a>SPI_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[da]"></a>SPI_Erase_Sector</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, spi_book.o(.text.SPI_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_Erase_Sector &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Enable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitForWriteEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_SPI_FLASH_Soft_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[aa]"></a>SPI_FLASH_Init</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, spi_book.o(.text.SPI_FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_FLASH_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCode_from_EXFlash
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_SPI_FLASH_Soft_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[e4]"></a>SPI_Flash_WAKEUP</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, spi_book.o(.text.SPI_Flash_WAKEUP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_Flash_WAKEUP &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[e0]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Send_Byte
</UL>

<P><STRONG><a name="[e3]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Send_Byte
</UL>

<P><STRONG><a name="[e2]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Send_Byte
</UL>

<P><STRONG><a name="[de]"></a>SPI_Init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text.SPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[ab]"></a>SPI_Read_Data</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, spi_book.o(.text.SPI_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_Read_Data &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCode_from_EXFlash
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_SPI_FLASH_Soft_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[127]"></a>SPI_Read_ID</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, spi_book.o(.text.SPI_Read_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_Read_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_SPI_FLASH_Soft_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>

<P><STRONG><a name="[e5]"></a>SPI_Show_Data</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, spi_book.o(.text.SPI_Show_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_Show_Data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_SPI_FLASH_Soft_Init
</UL>

<P><STRONG><a name="[dd]"></a>SPI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text.SPI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[d9]"></a>SPI_Write_Data</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, spi_book.o(.text.SPI_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Enable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitForWriteEnd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Send_Byte
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BufferWrite_Data
</UL>

<P><STRONG><a name="[e6]"></a>SRAM_Init</STRONG> (Thumb, 664 bytes, Stack size 152 bytes, sram_book.o(.text.SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SRAM_Init &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_SRAM_Init
</UL>

<P><STRONG><a name="[e7]"></a>SRAM_Test</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, sram_book.o(.text.SRAM_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SRAM_Test &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_SRAM_Init
</UL>

<P><STRONG><a name="[15f]"></a>SRAM_Write</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, sram_book.o(.text.SRAM_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SRAM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_SRAM_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>Scan_file_Check</STRONG> (Thumb, 68 bytes, Stack size 112 bytes, fatfs_book.o(.text.Scan_file_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = Scan_file_Check &rArr; scan_file &rArr;  scan_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_file
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_FatFs_Document_Init
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, systick_book.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; fn_SysTick_delay_decrement &rArr; fn_LED_Corporate
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_SysTick_delay_decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[fd]"></a>Touch_Button_Down</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, xpt2046_lcd_device_book.o(.text.Touch_Button_Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Touch_Button_Down
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_TouchDown
</UL>

<P><STRONG><a name="[100]"></a>Touch_Button_Up</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, xpt2046_lcd_device_book.o(.text.Touch_Button_Up))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Touch_Button_Up
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_TouchUp
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usart_book.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[162]"></a>USART_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_USART_Config
</UL>

<P><STRONG><a name="[10c]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_RAM_TO_USART
</UL>

<P><STRONG><a name="[f2]"></a>USART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_RAM_TO_USART
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Usart_Send_Byte
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Usart_SendString
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendHalf_32_Word
</UL>

<P><STRONG><a name="[ec]"></a>USART_GetITStatus</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text.USART_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[161]"></a>USART_ITConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_USART_Config
</UL>

<P><STRONG><a name="[ef]"></a>USART_Init</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, stm32f10x_usart.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_USART_Config
</UL>

<P><STRONG><a name="[ed]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Usart_Send_Byte
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>Usart_SendHalf_32_Word</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usart_book.o(.text.Usart_SendHalf_32_Word))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Usart_SendHalf_32_Word &rArr; fn_Usart_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Usart_Send_Byte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Buffer_Show
</UL>

<P><STRONG><a name="[f3]"></a>XPT2046_GPIO_Init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, xpt2046_lcd_book.o(.text.XPT2046_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XPT2046_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_XPT2046_Init
</UL>

<P><STRONG><a name="[f4]"></a>XPT2046_Get_TouchedPoint</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, xpt2046_lcd_function_book.o(.text.XPT2046_Get_TouchedPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = XPT2046_Get_TouchedPoint &rArr; XPT2046_ReadAdc_Smooth_XY &rArr; XPT2046_ReadAdc_XY &rArr; XPT2046_ReadAdc &rArr; XPT2046_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_ReadAdc_Smooth_XY
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_TouchEvenHandler
</UL>

<P><STRONG><a name="[f5]"></a>XPT2046_ReadAdc_Smooth_XY</STRONG> (Thumb, 344 bytes, Stack size 80 bytes, xpt2046_lcd_function_book.o(.text.XPT2046_ReadAdc_Smooth_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = XPT2046_ReadAdc_Smooth_XY &rArr; XPT2046_ReadAdc_XY &rArr; XPT2046_ReadAdc &rArr; XPT2046_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_ReadAdc_XY
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Get_TouchedPoint
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate_Page
</UL>

<P><STRONG><a name="[fa]"></a>XPT2046_ReadAdc_XY</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, xpt2046_lcd_book.o(.text.XPT2046_ReadAdc_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = XPT2046_ReadAdc_XY &rArr; XPT2046_ReadAdc &rArr; XPT2046_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_ReadAdc
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_DelayUS
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_ReadAdc_Smooth_XY
</UL>

<P><STRONG><a name="[fb]"></a>XPT2046_TouchDetect</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, xpt2046_lcd_function_book.o(.text.XPT2046_TouchDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XPT2046_TouchDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_TouchEvenHandler
</UL>

<P><STRONG><a name="[fc]"></a>XPT2046_TouchDown</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xpt2046_lcd_function_book.o(.text.XPT2046_TouchDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = XPT2046_TouchDown &rArr; Draw_Trail &rArr; LCD_DrawUniLineCircle &rArr; ILI9341_DrawCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Button_Down
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Trail
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_TouchEvenHandler
</UL>

<P><STRONG><a name="[fe]"></a>XPT2046_TouchEvenHandler</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, xpt2046_lcd_function_book.o(.text.XPT2046_TouchEvenHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = XPT2046_TouchEvenHandler &rArr; XPT2046_TouchDown &rArr; Draw_Trail &rArr; LCD_DrawUniLineCircle &rArr; ILI9341_DrawCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_TouchUp
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_TouchDown
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_TouchDetect
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Get_TouchedPoint
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>XPT2046_TouchUp</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, xpt2046_lcd_function_book.o(.text.XPT2046_TouchUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XPT2046_TouchUp &rArr; Touch_Button_Up
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Button_Up
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_TouchEvenHandler
</UL>

<P><STRONG><a name="[101]"></a>XPT2046_Touch_Calibrate</STRONG> (Thumb, 676 bytes, Stack size 120 bytes, xpt2046_lcd_function_book.o(.text.XPT2046_Touch_Calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = XPT2046_Touch_Calibrate &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate_Page
</UL>

<P><STRONG><a name="[103]"></a>XPT2046_Touch_Calibrate_Page</STRONG> (Thumb, 576 bytes, Stack size 144 bytes, lcd_pagehtml_book.o(.text.XPT2046_Touch_Calibrate_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = XPT2046_Touch_Calibrate_Page &rArr; ILI9341_DispStringLine_EN_CH &rArr; ILI9341_DispChar_CH &rArr; GetGBKCode_from_EXFlash &rArr; SPI_Read_Data &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate_SetStand4Pint
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_ReadAdc_Smooth_XY
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetForeColor
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFont
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawCross
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawCircle
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispStringLine_EN_CH
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispStringLine_EN
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Clear
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Delay
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_XPT2046_Init
</UL>

<P><STRONG><a name="[104]"></a>XPT2046_Touch_Calibrate_SetStand4Pint</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, xpt2046_lcd_function_book.o(.text.XPT2046_Touch_Calibrate_SetStand4Pint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XPT2046_Touch_Calibrate_SetStand4Pint
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate_Page
</UL>

<P><STRONG><a name="[106]"></a>_Buffer_Show</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dma_book.o(.text._Buffer_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _Buffer_Show &rArr; Usart_SendHalf_32_Word &rArr; fn_Usart_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendHalf_32_Word
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ROM_TO_RAM
</UL>

<P><STRONG><a name="[10f]"></a>_Buffercmp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dma_book.o(.text._Buffercmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Buffercmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ROM_TO_RAM
</UL>

<P><STRONG><a name="[107]"></a>_DMA_Config</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, dma_book.o(.text._DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ROM_TO_RAM
</UL>

<P><STRONG><a name="[10a]"></a>_DMA_RAM_TO_USART</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, dma_book.o(.text._DMA_RAM_TO_USART))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _DMA_RAM_TO_USART &rArr; _USART_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USART_DMA_Config
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Systick_Delay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_DMA_show_Init
</UL>

<P><STRONG><a name="[10d]"></a>_DMA_ROM_TO_RAM</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, dma_book.o(.text._DMA_ROM_TO_RAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _DMA_ROM_TO_RAM &rArr; _DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Buffercmp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Buffer_Show
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_DMA_show_Init
</UL>

<P><STRONG><a name="[110]"></a>_I2C_EE_Init</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, i2c_book.o(.text._I2C_EE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _I2C_EE_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_I2C_EE_Init
</UL>

<P><STRONG><a name="[10b]"></a>_USART_DMA_Config</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, dma_book.o(.text._USART_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _USART_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_RAM_TO_USART
</UL>

<P><STRONG><a name="[11d]"></a>clust2sect</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(.text.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[124]"></a>disk_initialize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, diskio.o(.text.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = disk_initialize &rArr; SPI_Flash_WAKEUP &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WAKEUP
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[132]"></a>disk_ioctl</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, diskio.o(.text.disk_ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[126]"></a>disk_read</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, diskio.o(.text.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = disk_read &rArr; SPI_Read_Data &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[125]"></a>disk_status</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, diskio.o(.text.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = disk_status &rArr; SPI_Read_ID
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[128]"></a>disk_write</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, diskio.o(.text.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Erase_Sector
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BufferWrite_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[a0]"></a>f_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ff.o(.text.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_document_Text
</UL>

<P><STRONG><a name="[a4]"></a>f_closedir</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(.text.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = f_closedir &rArr; validate &rArr; disk_status &rArr; SPI_Read_ID
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_document_set_content
</UL>

<P><STRONG><a name="[a8]"></a>f_getfree</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, ff.o(.text.f_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_equipment_flash
</UL>

<P><STRONG><a name="[9d]"></a>f_lseek</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, ff.o(.text.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_document_Text
</UL>

<P><STRONG><a name="[a3]"></a>f_mkdir</STRONG> (Thumb, 348 bytes, Stack size 616 bytes, ff.o(.text.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_document_set_content
</UL>

<P><STRONG><a name="[98]"></a>f_mkfs</STRONG> (Thumb, 1456 bytes, Stack size 88 bytes, ff.o(.text.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = f_mkfs &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_equipment_flash
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_Close_flash
</UL>

<P><STRONG><a name="[99]"></a>f_mount</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ff.o(.text.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_equipment_flash
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_Close_flash
</UL>

<P><STRONG><a name="[9c]"></a>f_open</STRONG> (Thumb, 312 bytes, Stack size 600 bytes, ff.o(.text.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_document_Text
</UL>

<P><STRONG><a name="[a2]"></a>f_opendir</STRONG> (Thumb, 98 bytes, Stack size 552 bytes, ff.o(.text.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_document_set_content
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_file
</UL>

<P><STRONG><a name="[9e]"></a>f_printf</STRONG> (Thumb, 556 bytes, Stack size 144 bytes, ff.o(.text.f_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = f_printf &rArr; putc_bfd &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_document_Text
</UL>

<P><STRONG><a name="[9f]"></a>f_read</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, ff.o(.text.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_document_Text
</UL>

<P><STRONG><a name="[136]"></a>f_readdir</STRONG> (Thumb, 86 bytes, Stack size 544 bytes, ff.o(.text.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_file
</UL>

<P><STRONG><a name="[a6]"></a>f_rename</STRONG> (Thumb, 250 bytes, Stack size 648 bytes, ff.o(.text.f_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_document_set_content
</UL>

<P><STRONG><a name="[138]"></a>f_stat</STRONG> (Thumb, 66 bytes, Stack size 576 bytes, ff.o(.text.f_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_check
</UL>

<P><STRONG><a name="[129]"></a>f_sync</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ff.o(.text.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[a5]"></a>f_unlink</STRONG> (Thumb, 150 bytes, Stack size 616 bytes, ff.o(.text.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_document_set_content
</UL>

<P><STRONG><a name="[135]"></a>f_write</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, ff.o(.text.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[16a]"></a>ff_convert</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, cc936.o(.text.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[11c]"></a>ff_wtoupper</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cc936.o(.text.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[139]"></a>file_check</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, fatfs_book.o(.text.file_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = file_check &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_FatFs_Document_Init
</UL>

<P><STRONG><a name="[13a]"></a>fn_DMA_show_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(.text.fn_DMA_show_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = fn_DMA_show_Init &rArr; _DMA_ROM_TO_RAM &rArr; _DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ROM_TO_RAM
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_RAM_TO_USART
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>fn_EXTI_GPIO_Config</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, exit_book.o(.text.fn_EXTI_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fn_EXTI_GPIO_Config &rArr; fn_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_NVIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13f]"></a>fn_FatFs_Document_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, main.o(.text.fn_FatFs_Document_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = fn_FatFs_Document_Init &rArr; FatFs_document_Text &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_check
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_file_Check
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_equipment_flash
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_document_set_content
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_document_Text
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_Close_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>fn_HRCC_SetSystic</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rcc_book.o(.text.fn_HRCC_SetSystic))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fn_HRCC_SetSystic &rArr; RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_RCC_Init
</UL>

<P><STRONG><a name="[14e]"></a>fn_I2C_EE_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, main.o(.text.fn_I2C_EE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fn_I2C_EE_Init &rArr; _I2C_EE_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_EE_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_fun
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_fun
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14f]"></a>fn_I2C_EE_Soft_Init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, main.o(.text.fn_I2C_EE_Soft_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fn_I2C_EE_Soft_Init &rArr; I2C_Soft_Write_fun &rArr; EE_Soft_WriteBytes &rArr; I2C_Stop &rArr; fn_Systick_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_Write_fun
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_Read_fun
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>fn_Key_GPIO_Config</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, key_book.o(.text.fn_Key_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fn_Key_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Key_Init
</UL>

<P><STRONG><a name="[151]"></a>fn_Key_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, key_book.o(.text.fn_Key_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fn_Key_Init &rArr; fn_Key_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Key_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[152]"></a>fn_LCD_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, main.o(.text.fn_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = fn_LCD_Init &rArr; Lcd_display_String &rArr; ILI9341_DisplayStringEx &rArr; ILI9341_DrawChar_Ex &rArr; ILI9341_GetPointPixel &rArr; ILI9341_SetCursor &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Systick_Delay
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_LCD_clear
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_display_String
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>fn_LED_ALL_OFF</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, led_book.o(.text.fn_LED_ALL_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fn_LED_ALL_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Led_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.fn_LED_Flash_Init)
</UL>
<P><STRONG><a name="[95]"></a>fn_LED_Corporate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, led_book.o(.text.fn_LED_Corporate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fn_LED_Corporate
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_SysTick_delay_decrement
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_key_Effect
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>fn_LED_Flash_Init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, main.o(.text.fn_LED_Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fn_LED_Flash_Init &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>fn_LED_GPIO_Config</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, led_book.o(.text.fn_LED_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fn_LED_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led_book.o(.text.fn_Led_Init)
</UL>
<P><STRONG><a name="[155]"></a>fn_Lcd_Page1</STRONG> (Thumb, 716 bytes, Stack size 48 bytes, lcd_pagehtml_book.o(.text.fn_Lcd_Page1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fn_Lcd_Page1 &rArr; ILI9341_Clear &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Lcd_Page_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>fn_Lcd_Page2</STRONG> (Thumb, 820 bytes, Stack size 48 bytes, lcd_pagehtml_book.o(.text.fn_Lcd_Page2))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = fn_Lcd_Page2 &rArr; ILI9341_DispString_EN_CH &rArr; ILI9341_DispChar_CH &rArr; GetGBKCode_from_EXFlash &rArr; SPI_Read_Data &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispString_EN_CH
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispString_CH
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispStringLine_EN
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[157]"></a>fn_Lcd_Page3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_pagehtml_book.o(.text.fn_Lcd_Page3))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fn_Lcd_Page3 &rArr; Palette_Init &rArr; ILI9341_DrawRectangle &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Palette_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>fn_Lcd_Page_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_pagehtml_book.o(.text.fn_Lcd_Page_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fn_Lcd_Page_Init &rArr; fn_Lcd_Page1 &rArr; ILI9341_Clear &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Lcd_Page1
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>fn_Led_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, led_book.o(.text.fn_Led_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fn_Led_Init &rArr; fn_LED_ALL_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_LED_ALL_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>fn_NVIC_Config</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, exit_book.o(.text.fn_NVIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fn_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_EXTI_GPIO_Config
</UL>

<P><STRONG><a name="[15c]"></a>fn_RCC_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rcc_book.o(.text.fn_RCC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fn_RCC_Init &rArr; fn_HRCC_SetSystic &rArr; RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_HRCC_SetSystic
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>fn_SPI_FLASH_Soft_Init</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, main.o(.text.fn_SPI_FLASH_Soft_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fn_SPI_FLASH_Soft_Init &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Show_Data
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_ID
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Data
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Erase_Sector
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BufferWrite_Data
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15e]"></a>fn_SRAM_Init</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, main.o(.text.fn_SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = fn_SRAM_Init &rArr; SRAM_Init &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Write
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Test
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>fn_SysTick_delay_decrement</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, systick_book.o(.text.fn_SysTick_delay_decrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fn_SysTick_delay_decrement &rArr; fn_LED_Corporate
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_LED_Corporate
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[49]"></a>fn_Systick_Delay</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, systick_book.o(.text.fn_Systick_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fn_Systick_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_Write_fun
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_Read_fun
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_RAM_TO_USART
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_display_String
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_LCD_Init
</UL>
<BR>[Address Reference Count : 3]<UL><LI> i2c_soft_book.o(.text.I2C_Soft_Read_fun)
<LI> i2c_soft_book.o(.text.I2C_WaitAck)
<LI> main.o(.text.fn_LED_Flash_Init)
</UL>
<P><STRONG><a name="[16b]"></a>fn_Systick_Delay_Handler_set</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, systick_book.o(.text.fn_Systick_Delay_Handler_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fn_Systick_Delay_Handler_set
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[160]"></a>fn_USART_Config</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, usart_book.o(.text.fn_USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fn_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_USART_Init
</UL>

<P><STRONG><a name="[163]"></a>fn_USART_IO_Config</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, usart_book.o(.text.fn_USART_IO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fn_USART_IO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_USART_Init
</UL>

<P><STRONG><a name="[164]"></a>fn_USART_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart_book.o(.text.fn_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fn_USART_Init &rArr; fn_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_USART_IO_Config
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_USART_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>fn_Usart_SendString</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usart_book.o(.text.fn_Usart_SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fn_Usart_SendString &rArr; fn_Usart_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Usart_Send_Byte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TIMEOUT_UserCallback
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_usart_show_Init
</UL>

<P><STRONG><a name="[f1]"></a>fn_Usart_Send_Byte</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart_book.o(.text.fn_Usart_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fn_Usart_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Usart_SendString
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendHalf_32_Word
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_usart_show_Init
</UL>

<P><STRONG><a name="[165]"></a>fn_XPT2046_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, main.o(.text.fn_XPT2046_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = fn_XPT2046_Init &rArr; XPT2046_Touch_Calibrate_Page &rArr; ILI9341_DispStringLine_EN_CH &rArr; ILI9341_DispChar_CH &rArr; GetGBKCode_from_EXFlash &rArr; SPI_Read_Data &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_GPIO_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate_Page
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_display_String
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[166]"></a>fn_key_Check</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, key_book.o(.text.fn_key_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fn_key_Check &rArr; fn_key_Effect &rArr; fn_LED_Corporate
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_key_judge
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_key_Effect
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[168]"></a>fn_key_Effect</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, key_book.o(.text.fn_key_Effect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fn_key_Effect &rArr; fn_LED_Corporate
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_LED_Corporate
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_key_Check
</UL>

<P><STRONG><a name="[167]"></a>fn_key_judge</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, key_book.o(.text.fn_key_judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fn_key_judge
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_key_Check
</UL>

<P><STRONG><a name="[169]"></a>fn_usart_show_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(.text.fn_usart_show_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fn_usart_show_Init &rArr; fn_Usart_SendString &rArr; fn_Usart_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Usart_Send_Byte
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Usart_SendString
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usart_book.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[116]"></a>get_fat</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, ff.o(.text.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[12c]"></a>get_fattime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, diskio.o(.text.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = main &rArr; fn_FatFs_Document_Init &rArr; FatFs_document_Text &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_USART_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Systick_Delay_Handler_set
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_RCC_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Led_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_key_Check
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Key_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_EXTI_GPIO_Config
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_TouchEvenHandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Lcd_Page_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Lcd_Page3
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Lcd_Page2
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Lcd_Page1
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Char_test
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_usart_show_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_XPT2046_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_SRAM_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_SPI_FLASH_Soft_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_LED_Flash_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_LCD_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_I2C_EE_Soft_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_I2C_EE_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_FatFs_Document_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_DMA_show_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[117]"></a>put_fat</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, ff.o(.text.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[16d]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[186]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[58]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_check
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_equipment_flash
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_document_set_content
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_document_Text
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_file
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Show_Data
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TIMEOUT_UserCallback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_Write_fun
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_Read_fun
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_fun
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_fun
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TIMEOUT_UserCallback
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_TouchEvenHandler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_ReadAdc_XY
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Test
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_XPT2046_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_LCD_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_I2C_EE_Soft_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_I2C_EE_Init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> fatfs_book.o(.text.file_check)
<LI> sram_book.o(.text.SRAM_Write)
</UL>
<P><STRONG><a name="[187]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[188]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[16f]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[189]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[105]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_file
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate_Page
</UL>

<P><STRONG><a name="[18a]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[18b]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[18c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[18d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[18e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[86]"></a>putchar</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, putchar.o(i.putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Char_test
</UL>

<P><STRONG><a name="[66]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_check
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_file_Check
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_equipment_flash
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_document_set_content
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_document_Text
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Data
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BufferWrite_Data
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_Write_fun
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_Read_fun
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Soft_WriteBytes
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_fun
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_fun
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ROM_TO_RAM
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_RAM_TO_USART
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_TouchEvenHandler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Touch_Calibrate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Test
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_usart_show_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_SPI_FLASH_Soft_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_LED_Flash_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_I2C_EE_Soft_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_I2C_EE_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_DMA_show_Init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text.fn_SPI_FLASH_Soft_Init)
<LI> main.o(.text.fn_SRAM_Init)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ac]"></a>I2C_EE_WaitEepromStandbyState</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, i2c_book.o(.text.I2C_EE_WaitEepromStandbyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_EE_WaitEepromStandbyState &rArr; I2C_ReadRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadRegister
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_fun
</UL>

<P><STRONG><a name="[bb]"></a>I2C_TIMEOUT_UserCallback</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, i2c_book.o(.text.I2C_TIMEOUT_UserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_TIMEOUT_UserCallback &rArr; fn_Usart_SendString &rArr; fn_Usart_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Usart_SendString
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_fun
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_fun
</UL>

<P><STRONG><a name="[8c]"></a>EE_Soft_Check_State</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, i2c_soft_book.o(.text.EE_Soft_Check_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EE_Soft_Check_State &rArr; I2C_Stop &rArr; fn_Systick_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_Write_fun
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_Init
</UL>

<P><STRONG><a name="[92]"></a>EE_Soft_WriteBytes</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, i2c_soft_book.o(.text.EE_Soft_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EE_Soft_WriteBytes &rArr; I2C_Stop &rArr; fn_Systick_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_Write_fun
</UL>

<P><STRONG><a name="[8f]"></a>I2C_SendByte</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, i2c_soft_book.o(.text.I2C_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_Read_fun
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Soft_WriteBytes
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Soft_Check_State
</UL>

<P><STRONG><a name="[8e]"></a>I2C_Start</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, i2c_soft_book.o(.text.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_Read_fun
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Soft_WriteBytes
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Soft_Check_State
</UL>

<P><STRONG><a name="[91]"></a>I2C_Stop</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, i2c_soft_book.o(.text.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Stop &rArr; fn_Systick_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_Systick_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_Read_fun
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Soft_WriteBytes
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Soft_Check_State
</UL>

<P><STRONG><a name="[90]"></a>I2C_WaitAck</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, i2c_soft_book.o(.text.I2C_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitAck
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_Read_fun
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Soft_WriteBytes
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Soft_Check_State
</UL>

<P><STRONG><a name="[57]"></a>SPI_FLASH_Send_Byte</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, spi_book.o(.text.SPI_FLASH_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Data
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Data
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WAKEUP
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Enable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitForWriteEnd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_book.o(.text.SPI_Write_Data)
</UL>
<P><STRONG><a name="[e1]"></a>SPI_TIMEOUT_UserCallback</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, spi_book.o(.text.SPI_TIMEOUT_UserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Send_Byte
</UL>

<P><STRONG><a name="[dc]"></a>SPI_WaitForWriteEnd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spi_book.o(.text.SPI_WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_WaitForWriteEnd &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Data
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Erase_Sector
</UL>

<P><STRONG><a name="[db]"></a>SPI_Write_Enable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, spi_book.o(.text.SPI_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Data
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Erase_Sector
</UL>

<P><STRONG><a name="[ea]"></a>scan_file</STRONG> (Thumb, 184 bytes, Stack size 104 bytes, fatfs_book.o(.text.scan_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + In Cycle
<LI>Call Chain = scan_file &rArr;  scan_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_file
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_file_Check
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_file
</UL>

<P><STRONG><a name="[c3]"></a>ILI9341_FillColor</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcd_draw_book.o(.text.ILI9341_FillColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ILI9341_FillColor
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_SetPointPixel
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawRectangle
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Clear
</UL>

<P><STRONG><a name="[cc]"></a>ILI9341_SetCursor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_draw_book.o(.text.ILI9341_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ILI9341_SetCursor &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_OpenWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_SetPointPixel
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_GetPointPixel
</UL>

<P><STRONG><a name="[f9]"></a>XPT2046_DelayUS</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, xpt2046_lcd_book.o(.text.XPT2046_DelayUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = XPT2046_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_ReadAdc_XY
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_ReadAdc
</UL>

<P><STRONG><a name="[f8]"></a>XPT2046_ReadAdc</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, xpt2046_lcd_book.o(.text.XPT2046_ReadAdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = XPT2046_ReadAdc &rArr; XPT2046_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_ReadAdc_XY
</UL>

<P><STRONG><a name="[55]"></a>Command_Clear_Palette</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, xpt2046_lcd_device_book.o(.text.Command_Clear_Palette))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Command_Clear_Palette &rArr; ILI9341_DrawRectangle &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawRectangle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xpt2046_lcd_device_book.o(.text.Palette_Init)
</UL>
<P><STRONG><a name="[53]"></a>Command_RUBBER_Palette</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xpt2046_lcd_device_book.o(.text.Command_RUBBER_Palette))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xpt2046_lcd_device_book.o(.text.Palette_Init)
</UL>
<P><STRONG><a name="[51]"></a>Command_Select_Brush</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xpt2046_lcd_device_book.o(.text.Command_Select_Brush))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xpt2046_lcd_device_book.o(.text.Palette_Init)
</UL>
<P><STRONG><a name="[4f]"></a>Command_Select_Color</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, xpt2046_lcd_device_book.o(.text.Command_Select_Color))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xpt2046_lcd_device_book.o(.text.Palette_Init)
</UL>
<P><STRONG><a name="[56]"></a>Draw_Clear_Button</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, xpt2046_lcd_device_book.o(.text.Draw_Clear_Button))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Draw_Clear_Button &rArr; ILI9341_DispString_EN_CH &rArr; ILI9341_DispChar_CH &rArr; GetGBKCode_from_EXFlash &rArr; SPI_Read_Data &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawRectangle
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispString_EN_CH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xpt2046_lcd_device_book.o(.text.Palette_Init)
</UL>
<P><STRONG><a name="[50]"></a>Draw_Color_Button</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, xpt2046_lcd_device_book.o(.text.Draw_Color_Button))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Draw_Color_Button &rArr; ILI9341_DrawRectangle &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawRectangle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xpt2046_lcd_device_book.o(.text.Palette_Init)
</UL>
<P><STRONG><a name="[54]"></a>Draw_RUBBER_Button</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, xpt2046_lcd_device_book.o(.text.Draw_RUBBER_Button))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Draw_RUBBER_Button &rArr; ILI9341_DispString_EN_CH &rArr; ILI9341_DispChar_CH &rArr; GetGBKCode_from_EXFlash &rArr; SPI_Read_Data &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawRectangle
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispString_EN_CH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xpt2046_lcd_device_book.o(.text.Palette_Init)
</UL>
<P><STRONG><a name="[52]"></a>Draw_Shape_Button</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, xpt2046_lcd_device_book.o(.text.Draw_Shape_Button))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Draw_Shape_Button &rArr; LCD_DrawUniLineCircle &rArr; ILI9341_DrawCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawUniLineCircle
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawRectangle
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawLine
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DrawCircle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xpt2046_lcd_device_book.o(.text.Palette_Init)
</UL>
<P><STRONG><a name="[112]"></a>check_fs</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, ff.o(.text.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[114]"></a>chk_chr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(.text.chk_chr))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>

<P><STRONG><a name="[115]"></a>create_chain</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ff.o(.text.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[118]"></a>dir_find</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, ff.o(.text.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[11a]"></a>dir_next</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, ff.o(.text.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[120]"></a>dir_read</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ff.o(.text.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[121]"></a>dir_register</STRONG> (Thumb, 608 bytes, Stack size 72 bytes, ff.o(.text.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[123]"></a>dir_remove</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ff.o(.text.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[119]"></a>dir_sdi</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, ff.o(.text.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[12b]"></a>find_volume</STRONG> (Thumb, 596 bytes, Stack size 56 bytes, ff.o(.text.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[12d]"></a>follow_path</STRONG> (Thumb, 720 bytes, Stack size 56 bytes, ff.o(.text.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[137]"></a>get_fileinfo</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, ff.o(.text.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[131]"></a>get_ldnumber</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ff.o(.text.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[133]"></a>ld_clust</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(.text.ld_clust))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[122]"></a>mem_cpy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text.mem_cpy))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[11f]"></a>mem_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(.text.mem_set))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[113]"></a>move_window</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ff.o(.text.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[134]"></a>putc_bfd</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ff.o(.text.putc_bfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = putc_bfd &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
</UL>

<P><STRONG><a name="[12e]"></a>remove_chain</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ff.o(.text.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[12f]"></a>st_clust</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(.text.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[11b]"></a>sum_sfn</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ff.o(.text.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[130]"></a>sync_fs</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ff.o(.text.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[11e]"></a>sync_window</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ff.o(.text.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sync_window &rArr; disk_write &rArr; SPI_BufferWrite_Data &rArr; SPI_Write_Data &rArr; SPI_Write_Enable &rArr; SPI_FLASH_Send_Byte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[12a]"></a>validate</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ff.o(.text.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = validate &rArr; disk_status &rArr; SPI_Read_ID
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[170]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[16e]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[173]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[172]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[68]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
